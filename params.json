{
  "name": "Yasic",
  "tagline": "yet another symbolic instruction code - transcompiler to flatassembly, written in fasm-macros",
  "body": "# about\r\nyet another symbolic instruction code is a programming language and transcompiler to flatassembly, which is written entirely in the macro-language of [flatassembler](http://flatassembler.net/), so do not worry if it is slowly (about 0.9s for the provided example). This is the nature of interpreted languages :-/\r\n\r\nNevertheless it is awes0me.\r\n\r\n# Getting started\r\nFirst of all some terms should be defined:\r\n* »source« or »code«: the code you write in yasic\r\n* »output«: the output this compiler produce or the compiled form of it\r\n* »input«: the input for your compiled program\r\n\r\nA source file must start with this header:\r\n```\r\n#!sba:yasic\r\n```\r\nand a newline character.\r\n\r\nThen you could write some code, e.g.:\r\n```\r\nlabel\r\n{\r\n  'hello world'\r\n  {\r\n    #print some text\r\n    echo('hello my friend')\r\n    jump('label')\r\n  }\r\n}\r\n```\r\n`label {}` defines a new label in the output. You could refer to it e.g. with `jump('label')`, which creates `jmp label` in the output. After a label a block (`{ [...] }`) have to follow.\r\n\r\nTo compare the input with a regular expression, you could use `'something' {}`. This compares the input with the string »something«. If this comparison is true, the block would be executed, if not, the output jumps to the end of the block. I go into detail later.\r\n\r\nIf you just want to remark or just do not want something in the output, you could use comments:\r\n```\r\n#comment from »#« to the end of the line.\r\n```\r\nThere are also some predefined functions like `echo('text')` to let the output call an echo-function to print _'text'_ or `jump('label')` to jump to _label_.\r\nThe end of a function-call is a `;` or a newline character, so if you want everything on one line, you have to use `;` at the end:\r\n```\r\n'hello world' { echo('hello my friend'); }\r\n```\r\nIt is time to compile this piece of code!\r\nYasic is written in flatassembler so you need to [download](http://flatassembler.net/download.php) it, if not already done so far.\r\nI also provided an [shell-script](https://github.com/sivizius/yasic/blob/master/sba.sh), but you could compile your source with:\r\n```shell\r\nfasm -m 128000 \"yasic.fcfg\" \"output.fasm\"\r\n```\r\nBut before you compile `yasic.fcfg`, you need to adjust the name of your source-file in this line of [`yasic.fcfg`](https://github.com/sivizius/yasic/blob/master/yasic.fcfg):\r\n```\r\nyasic_parse 'source-file.sba'\r\n```\r\nThere are some examples in the _code_-directory.\r\n\r\nThere are also some other options for the compiler in this file:\r\n* to define the name of the echo-function in output:\r\n```\r\nyasic.OpEcho          equ 'echo_put'\r\n```\r\n* jump here, if the input does not match:\r\n```\r\nyasic.FailSafe        equ 'fail_safe'\r\n```\r\n* call this to get a new character:\r\n```\r\nyasic.GetChar         equ 'qword [ files.getChar ]'\r\n```\r\n* if `echo` should called like this: `echo_put qword [ msg_0000000000000000 ]`, set this option\r\n```\r\nyasic.IndirectString  equ false\r\n```\r\n\r\n* set the structure of strings (e.g. `db`):\r\n```\r\nyasic.Symbol          equ 'symbol'\r\n```\r\n* where is the return-value of getChar? (e.g. `rax`)\r\n```\r\nyasic.TheChar         equ 'my_char'\r\n```\r\n* if this option is true, the output is smaller, but less readable\r\n```\r\nyasic.MagicNumbers    equ false\r\n```\r\n* set the indentation (not the indentation-size!)\r\n```\r\nyasic.Depth           equ 0\r\n```\r\n\r\n# Regular Expressions\r\nWell, the regex I used in yasic are similar to PCRE, but not the same!\r\nYasic does not support quantifiers yet, character-classes and ranges are a bit different and groups are only implemented very thin.\r\nTo define a regular expression you just had to write:\r\n```\r\n'regex' {}\r\n```\r\nYasic supports the wildcard `.` for any character and escape sequences for some special characters and even some character-classes with `\\`:\r\n```\r\n'regex..\\.\\W\\n' {}\r\n```\r\nTo compare the input with a class of characters, you just put the name of the class in `<` and `>`:\r\n```\r\n'<alnum><A><B><C>' {}\r\n```\r\nIf you just put one character into this brackets, e.g. `<A>`, the regular expression match _a_ and _A_, if you do not put them into brackets, the regex is case-sensitive!\r\n\r\nTo define a range, you have to put the start and the end into `[` and `]`:\r\n```\r\n'[09][AZ|az]' {}\r\n```\r\nThis also allows multiple ranges, seperated with `|`, so this regular expression match _1a_, _9Z_, but not _a9_.\r\nBut note that the characters must be sorted to their ascii values!\r\nThis would match _A_, _Z_, but never _0_:\r\n```\r\n'[AZ|09]' {}\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}