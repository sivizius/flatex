macro yasic_operation                   depth,                                  operation,                              [ argument ]
{
  common
    local                               offs
    local                               next
    next                                =                                       1
    offs                                =                                       $
    times ( depth )                     db                                      '  '
    db                                  operation
  forward
    if ( next = 0 )
      db                                ','
    end if
    next                                =                                       0
    times ( 40 - ( $ - offs ))          db                                      ' '
    offs                                =                                       $
    db                                  argument
  common
    db                                  yasic.sNewLine
}
macro yasic_operation_                  depth,                                  operation,                              [ argument ]
{
  common
    local                               offs
    local                               next
    next                                =                                       1
    offs                                =                                       $
    times ( depth )                     db                                      '  '
    db                                  operation
  forward
    if ( next = 0 )
      db                                ','
    end if
    next                                =                                       0
    times ( 40 - ( $ - offs ))          db                                      ' '
    offs                                =                                       $
    db                                  argument
}
struc yasic_fail                        message,                                ichar,    line,     go,       pos,      _file_,   here,     size
{
  local chars, chars.size, modes, modes.size,                                   offs
  virtual                               at null
    chars::
      file                              _file_
    chars.size                          =                                       $
  end virtual
  modes.size                            =                                       18
  virtual                               at null
    modes::
      db                                'Invalid           '
      db                                'Header            '
      db                                'Space             '
      db                                'Comment           '
      db                                'Content           '
      db                                'RegEx             '
      db                                'RegExOpen         '
      db                                'RegExWait         '
      db                                'RegExString       '
      db                                'RegExEscape       '
      db                                'RegExEscapeString '
      db                                'RegExHexWait      '
      db                                'RegExHexString    '
      db                                'RegExClass        '
      db                                'Label             '
      db                                'LabelWait         '
      db                                'Block             '
      db                                'Jump              '
      db                                'JumpDestStart     '
      db                                'JumpDest          '
      db                                'CommandWait       '
      db                                'CommandLook       '
      db                                'CommandArgument   '
      db                                'CommandNext       '
      db                                'CommandStop       '
      db                                'CommandString     '
      db                                'Let               '
      db                                'LetWait           '
      db                                'LetNull           '
      db                                'LetDecimal        '
      db                                'LetHexadecimal    '
      db                                'LetString         '
      db                                'range             '
      db                                'range_to          '
      db                                'range_wait        '
  end virtual
  display                               yasic.sNewLine, yasic.sNewLine
  db                                    yasic.sNewLine, yasic.sNewLine
  display                               '[asm:yasic] '
  db                                    ';< an error occured >', yasic.sNewLine
  db                                    ';{', yasic.sNewLine
  db                                    ';:  '
  display                               message
  db                                    message
  if ( size eq )
  else
    display                             '»'
    db                                  '> ›'
    repeat                              size
      load a                            byte                                    from chars:( here + % - 1 )
      display                           a
      db                                a
    end repeat
    db                                  '‹'
    display                             '«'
  end if
  db                                    yasic.sNewLine
  db                                    ';:  file: »'
  db                                    _file_
  db                                    '«', yasic.sNewLine
  db                                    ';:  mode: <'
  offs                                  =                                       ( modes.size * . )
  repeat                                modes.size
    load                                char byte                               from modes:( offs + % - 1 )
    if ( char = ' ' )
      break
    else
      db                                char
    end if
  end repeat
  db                                    '>', yasic.sNewLine
  display                               yasic.sNewLine
  display                               '[asm:yasic] on line: 0x'
  db                                    ';:  line: 0x'
  displayHex                            line
  hd                                    line
  display                               ' char: 0x'
  db                                    ';:  char: 0x'
  displayHex2                           ichar
  hw                                    ichar
  if ( ichar > yasic.sControlChars )
    display                             ' ( ›', ichar, '‹ )'
    db                                  ' ( ›', ichar, '‹ )'
  end if
  display                               ':', yasic.sNewLine
  db                                    ':', yasic.sNewLine
  display                               '> ›'
  db                                    ';:  »'
  while ( 1 = 1 )
    load char                           byte                                    from chars:( go + % - 1 )
    if ( char = yasic.sNewLine )
      break
    else
      display                           char
      db                                char
    end if
  end while
  display                               '‹', yasic.sNewLine
  display                               '   '
  db                                    '«', yasic.sNewLine
  db                                    ';:   '
  repeat                                ( pos )
    display                             ' '
    db                                  ' '
  end repeat
  display                               '^', yasic.sNewLine
  db                                    '^', yasic.sNewLine
  db                                    ';}', yasic.sNewLine, yasic.sNewLine
  .                                     =                                       yasic.mError
}
macro yasic_parse                       input
{
  local header, header.size, head
  local chars,  chars.size, char, ichar, utf8, ipos, isize
  local offs, size, line, go, pos
  local mode, function, begin
  local class
  local func, depth, idepth, layer, layer.max, count
  local group, group.depth, group.ctr, group.go
  local value, stored, temp
  local symbols, symbol.msk, symbol.var, symbol.cmd
  local arguments, argument.msk, argument.max,                                  argument.ctr
  local messages, message.ctr, message.num
  local output, output.size, output.offs
  local variables, variable.ctr, variable.max
  if ( defined yasic.Depth )
    idepth                              =                                       ( yasic.Depth + 1 )
  else
    idepth                              =                                       ( 1 )
  end if
  virtual                               at null                                 ;( actual code to parse )
    chars::
      file                              input
    chars.size                          =                                       $
  end virtual
  virtual                               at null                                 ;( for header comparison )
    header::
      db                                '#!sba:yasic', yasic.sNewLine
    header.size                         =                                       $
  end virtual
  layer.max                             =                                       1024
  virtual                               at null                                 ;( deepness of code {, } )
    layer::
      rq                                layer.max                               ;counter
      rw                                layer.max                               ;group
  end virtual
  symbol.msk                            =                                       (( 2 shl 10 ) - 1 )
  virtual                               at null                                 ;( variables )
    symbols::
      rw                                (( symbol.msk + 1 ))                    ;    type
      rw                                (( symbol.msk + 1 ))                    ;   unused
      rd                                (( symbol.msk + 1 ))                    ;       size
      rq                                (( symbol.msk + 1 ))                    ;qword  offs
  end virtual
  argument.max                          =                                       8
  argument.msk                          =                                       ( argument.max - 1 )
  virtual                               at null                                 ;( arguments )
    arguments::
      rw                                ( argument.msk + 1 )                    ;    type
      rw                                ( argument.msk + 1 )                    ;   unused
      rd                                ( argument.msk + 1 )                    ;       size
      rq                                ( argument.msk + 1 )                    ;qword  offs
  end virtual
  message.num                           =                                       16384
  virtual                               at null
    messages::
      rq                                ( message.num )
      rd                                ( message.num )
  end virtual
  output.size                           =                                       ( 2 shl ( 20 ))
  virtual                               at null
    output::
      rb                                output.size
  end virtual
  variables.max                         =                                       ( 2 shl ( 20 ))
  virtual                               at null
    variables::
      rb                                variables.max                           ;type (signed/unsigned, data/resv, (byte, char, word, dword, qword, pointer, string, ...))
      rb                                variables.max                           ;name.size
      rd                                variables.max                           ;     /size
      rw                                variables.max                           ;?
      rq                                variables.max                           ;value/*pointer
      rq                                variables.max                           ;*name
      rq                                variables.max                           ;hash
  end virtual
  ;( get length of some strings )
  ;{
    virtual                             at null
      db                                yasic.OpEcho
      yasic.OpEcho.size                 =                                       $
    end virtual
    virtual                             at null
      db                                yasic.OpSymbolsAdd
      yasic.OpSymbolsAdd.size           =                                       $
    end virtual
    virtual                             at null
      db                                yasic.OpSymbolsGet
      yasic.OpSymbolsGet.size           =                                       $
    end virtual
    virtual                             at null
      db                                yasic.OpSymbolsNew
      yasic.OpSymbolsNew.size           =                                       $
    end virtual
    virtual                             at null
      db                                yasic.OpSymbolsSet
      yasic.OpSymbolsSet.size           =                                       $
    end virtual
  ;}
  if      ( yasic.Output eq '' )
  else if ( yasic.Output eq 'bin64' )
    db                                  'format binary', yasic.sNewLine
    db                                  'use64', yasic.sNewLine
    db                                  yasic.sNewLine
  else if ( yasic.Output eq 'elf64')
    db                                  'format ELF64 executable', yasic.sNewLine
    db                                  'use64', yasic.sNewLine
    db                                  'entry ', yasic.Entry, yasic.sNewLine
    db                                  yasic.sNewLine
  else
    mode                                yasic_fail                              'unknown output format!',                                   char,     line,     go,       pos,      input
  end if
  if ( yasic.MagicNumbers eq false )
    times ( idepth - 1 )                db                                      '  '
    db                                  ';( static )', yasic.sNewLine
    times ( idepth - 1 )                db                                      '  '
    db                                  ';{', yasic.sNewLine
    if ~( yasic.SourceStat eq '' )
      file                              yasic.SourceStat
      db                                yasic.sNewLine
    end if
    times ( idepth )                    db                                      '  '
    db                                  'yasic.fCaseMask'
    times ( 40 - 2 * idepth - 6 - 9 )   db                                      ' '
    db                                  '=                                       0x00000020',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.fSpecial'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       0x80000000',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.fCharMask'
    times ( 40 - 2 * idepth - 6 - 9 )   db                                      ' '
    db                                  '=                                       0x001fffff',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sFinal'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       0x00000000',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNull'
    times ( 40 - 2 * idepth - 6 - 5 )   db                                      ' '
    db                                  '=                                       0x00000000',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNUL'
    times ( 40 - 2 * idepth - 6 - 4 )   db                                      ' '
    db                                  '=                                       0x00000000',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sBell'
    times ( 40 - 2 * idepth - 6 - 5 )   db                                      ' '
    db                                  '=                                       0x00000007',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sBEL'
    times ( 40 - 2 * idepth - 6 - 4 )   db                                      ' '
    db                                  '=                                       0x00000007',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sBackSpace'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       0x00000008',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sTabulator'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       0x00000009',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sTAB'
    times ( 40 - 2 * idepth - 6 - 4 )   db                                      ' '
    db                                  '=                                       0x00000009',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNewLine'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       0x0000000a',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sLineFeed'
    times ( 40 - 2 * idepth - 6 - 9 )   db                                      ' '
    db                                  '=                                       0x0000000a',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sLF'
    times ( 40 - 2 * idepth - 6 - 3 )   db                                      ' '
    db                                  '=                                       0x0000000a',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sVerticalTab'
    times ( 40 - 2 * idepth - 6 - 12 )  db                                      ' '
    db                                  '=                                       0x0000000b',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sVT'
    times ( 40 - 2 * idepth - 6 - 3 )   db                                      ' '
    db                                  '=                                       0x0000000b',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNewPage'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       0x0000000c',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sFormFeed'
    times ( 40 - 2 * idepth - 6 - 9 )   db                                      ' '
    db                                  '=                                       0x0000000c',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sFF'
    times ( 40 - 2 * idepth - 6 - 3 )   db                                      ' '
    db                                  '=                                       0x0000000c',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sCarriageReturn'
    times ( 40 - 2 * idepth - 6 - 15 )  db                                      ' '
    db                                  '=                                       0x0000000d',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sReturn'
    times ( 40 - 2 * idepth - 6 - 7 )   db                                      ' '
    db                                  '=                                       0x0000000d',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sCR'
    times ( 40 - 2 * idepth - 6 - 3 )   db                                      ' '
    db                                  '=                                       0x0000000d',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sControlChars'
    times ( 40 - 2 * idepth - 6 - 13 )  db                                      ' '
    db                                  '=                                       0x0000001f',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sWhitespace'
    times ( 40 - 2 * idepth - 6 - 11 )  db                                      ' '
    db                                  '=                                       0x00000020',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sQuotation'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       0x00000022',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sApostrophe'
    times ( 40 - 2 * idepth - 6 - 11 )  db                                      ' '
    db                                  '=                                       0x00000027',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sSemicolon'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       0x00000059',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sBackSlash'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       0x0000005c',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sDEL'
    times ( 40 - 2 * idepth - 6 - 4 )   db                                      ' '
    db                                  '=                                       0x0000007f',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sEscape'
    times ( 40 - 2 * idepth - 6 - 7 )   db                                      ' '
    db                                  '=                                       0x0000001b',                           yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sUpper'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'A', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sLower'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'B', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sAlpha'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'C', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sAlphaSave'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'D', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sAlphaNumeric'
    times ( 40 - 2 * idepth - 6 - 13 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'E', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sAlphaNumericSave'
    times ( 40 - 2 * idepth - 6 - 17 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'F', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sOctal'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'G', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sDecimal'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'H', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoDecimal'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'I', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sHexadecimal'
    times ( 40 - 2 * idepth - 6 - 12 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'J', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sHexadecimalSave'
    times ( 40 - 2 * idepth - 6 - 16 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'K', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sPunctuation'
    times ( 40 - 2 * idepth - 6 - 12 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'L', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sBlank'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'M', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sSpace'
    times ( 40 - 2 * idepth - 6 - 6 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'N', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoSpace'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'O', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sControl'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'P', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sGraphical'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'Q', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sPrintable'
    times ( 40 - 2 * idepth - 6 - 10 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'R', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sWord'
    times ( 40 - 2 * idepth - 6 - 5 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'S', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sWordSave'
    times ( 40 - 2 * idepth - 6 - 9 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'T', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoWord'
    times ( 40 - 2 * idepth - 6 - 7 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'U', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoWordSave'
    times ( 40 - 2 * idepth - 6 - 11 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'V', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sString'
    times ( 40 - 2 * idepth - 6 - 7 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'W', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sMathematical'
    times ( 40 - 2 * idepth - 6 - 13 )  db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'X', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sBrackets'
    times ( 40 - 2 * idepth - 6 - 9 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'Y', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sAny'
    times ( 40 - 2 * idepth - 6 - 4 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'Z', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseA'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseB'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'b', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseC'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'c', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseD'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'd', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseE'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'e', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseF'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'f', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseG'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'g', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseH'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'h', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseI'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'i', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseJ'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'j', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseK'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'k', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseL'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'l', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseM'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'm', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseN'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'n', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseO'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'o', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseP'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'p', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseQ'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'q', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseR'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'r', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseS'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 's', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseT'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 't', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseU'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'u', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseV'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'v', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseW'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'w', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseX'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'x', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseY'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'y', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth )                    db                                      '  '
    db                                  'yasic.sNoCaseZ'
    times ( 40 - 2 * idepth - 6 - 8 )   db                                      ' '
    db                                  '=                                       ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' + yasic.fSpecial', yasic.sNewLine
    times ( idepth - 1 )                db                                      '  '
    db                                  ';}', yasic.sNewLine
  else
    if ~( yasic.SourceStat eq '' )
      times ( idepth - 1 )              db                                      '  '
      db                                ';( static )', yasic.sNewLine
      times ( idepth - 1 )              db                                      '  '
      db                                ';{', yasic.sNewLine
      file                              yasic.SourceStat
      db                                yasic.sNewLine
      times ( idepth - 1 )              db                                      '  '
      db                                ';}', yasic.sNewLine
    end if
  end if
  if ( yasic.Output eq 'elf64' )
    db                                  'segment executable', yasic.sNewLine
  end if
  times ( idepth - 1 )                  db                                      '  '
  db                                    ';( code )', yasic.sNewLine
  times ( idepth - 1 )                  db                                      '  '
  db                                    ';{', yasic.sNewLine
  if ~( yasic.SourceCode eq '' )
    file                                yasic.SourceCode
    db                                  yasic.sNewLine
  end if
  ichar                                 =                                       ( 0 )
  char                                  =                                       ( 0 )
  line                                  =                                       ( 1 )
  ipos                                  =                                       ( 0 )
  isize                                 =                                       ( 0 )
  pos                                   =                                       ( 0 - 1 )
  utf8                                  =                                       ( 0 )
  group                                 =                                       ( 0 )
  group.ctr                             =                                       ( 0 )
  mode                                  =                                       yasic.mHeader
  value                                 =                                       header.size
  depth                                 =                                       idepth
  class                                 =                                       yasic.class_seed
  function                              =                                       ( 1 )
  begin                                 =                                       ( 1 )
  mode                                  =                                       yasic.mHeader
  value                                 =                                       header.size
  depth                                 =                                       idepth
  class                                 =                                       yasic.class_seed
  count                                 =                                       ( 0 )
  go                                    =                                       ( 0 )
  message.ctr                           =                                       ( 0 )
  output.offs                           =                                       ( 0 )
  repeat                                chars.size
    if ( group = 65536 )
      mode                              yasic_fail                              'too many groups!',                                         char,     line,     go,       pos,      input
    end if
    if ( group.ctr = 65536 )
      mode                              yasic_fail                              'too many options in group!',                               char,     line,     go,       pos,      input
    end if
    if ( ichar = yasic.sNewLine )
      line                              =                                       ( line + 1 )
      go                                =                                       ( ipos )
      pos                               =                                       ( null )
    else
      pos                               =                                       ( pos + 1 )
    end if
    load                                ichar byte                              from chars:( % - 1 )
    if      ( ichar >= 0xf8 )
      mode                              yasic_fail                              'invalid character',                                        char,     line,     go,       pos,      input
    else if ( ichar >= 0xf0 & utf8 =    null )
      utf8                              =                                       ( 3 )
      isize                             =                                       ( 4 )
      char                              =                                       ( ichar and 0x07 )
    else if ( ichar >= 0xe0 & utf8 =    null )
      utf8                              =                                       ( 2 )
      isize                             =                                       ( 3 )
      char                              =                                       ( ichar and 0x0f )
    else if ( ichar >= 0xc0 & utf8 =    null )
      utf8                              =                                       ( 1 )
      isize                             =                                       ( 2 )
      char                              =                                       ( ichar and 0x1f )
    else if ( ichar >= 0x80 & utf8 <>   null )
      utf8                              =                                       ( utf8 - 1 )
      char                              =                                       (( char shl 6 ) + ( ichar and 0x3f ))
    else if ( ichar <= 0x7f & utf8 =  null)
      char                              =                                       ( ichar )
      isize                             =                                       ( 1 )
    else
      mode                              yasic_fail                              'invalid character',                                        char,     line,     go,       pos,      input
    end if
    if ( utf8 = null )
      ichar                             =                                       char
      if ( output.offs >= output.size   )
        mode                            yasic_fail                              'output-buffer too small! adjust output.size.',             char,     line,     go,       pos,      input
      end if
  ;    display '<', char, '>', yasic.sNewLine
      ;< actual parser >
      if      ( mode = yasic.mInvalid )                                         ;< invalid >
        mode                            yasic_fail                              'probably undefined mode!',                                 char,     line,     go,       pos,      input
      else if ( mode = yasic.mHeader )                                          ;< header >
        load                            head byte                               from header:( ipos )
        if ( char = head )
          value                         =                                       ( value - 1 )
          if ( value = 0 )
            mode                        =                                       yasic.mSpace
          end if
        else
          mode                          yasic_fail                              'invalid header: ',                                         char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mSpace )                                           ;< space >
        if      ( char = yasic.sApostrophe )
          output.offs                   =                                       ( output.offs + 2 * ( depth - idepth ))
          if ( begin = 1 )
            yasic_operation             depth,                                  'call',                                 yasic.GetChar
            begin                       =                                       0
          else if ( begin = 2 )
            depth                       =                                       ( depth - 1 )
            yasic_operation             depth,                                  'pop',                                  yasic.TheChar
            begin                       =                                       0
          end if
          if ( depth = idepth )
            function                    =                                       0
          end if
          group.go                      =                                       1
          mode                          =                                       yasic.mRegExOpen
          group.depth                   =                                       0
        else if ( char = '#' )
          mode                          =                                       yasic.mRemark
        else if ( char = '>' )
          times ( depth )               db                                      '  '
          mode                          =                                       yasic.mContent
        else if ( char = '{' )
          mode                          =                                       yasic.mInline
        else if ( char = '}' )
          if ( begin = 2 )
            depth                       =                                       ( depth - 1 )
            yasic_operation             depth,                                  'pop',                                  yasic.TheChar
          end if
          begin                         =                                       0
          if ( depth = idepth )
            mode                        yasic_fail                              'more »}« than »{«!',                                       char,     line,     go,       pos,      input
          else
            depth                       =                                       ( depth - 1 )
            times ( depth )             db                                      '  '
            output.offs                 =                                       ( output.offs + 2 * ( depth - idepth ))
            db                          ';}', yasic.sNewLine
            store                       byte  '}'                               at output:(                             output.offs )
            output.offs                 =                                       ( output.offs + 1 )
            if ( depth = idepth )
              if ( function = 0 )
                times ( depth )         db                                      '  '
                load                    temp qword                              from layer:(( depth - idepth ) * 10 + 0 )
                db                      '.close_'
                hq                      ( temp )
                db                      ':', yasic.sNewLine
              end if
              times ( depth )           db                                      '  '
              db                        'jmp'
              times ( 40 - ( 2 * depth ) - 3 )                                  db                                      ' '
              db                        yasic.FailSafe
              db                        yasic.sNewLine
              function                  =                                       1
            else
              store                     byte  yasic.sNewLine                    at output:( output.offs )
              output.offs               =                                       ( output.offs + 1 )
              load                      temp qword                              from layer:(( depth - idepth ) * 10 + 0 )
              times ( depth )           db                                      '  '
              db                        '.close_'
              hq                        ( temp )
              db                        ':', yasic.sNewLine
              times ( depth )           db                                      '  '
              db                        '.group_'
              hq                        ( temp )
              db                        '_'
              load                      temp word                               from layer:(( depth - idepth ) * 10 + 8 )
              hw                        ( temp )
              db                        ':', yasic.sNewLine
            end if
          end if
        else if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ))
          func                          __hash_char__                           yasic.label_seed,                       ( char or yasic.fCaseMask )
          symbol.var                    =                                       0xffffffffffffffff
          mode                          =                                       yasic.mLabel
          offs                          =                                       ( ipos )
          size                          =                                       1
          if ( depth = idepth )
            store                       byte  yasic.sNewLine                    at output:( output.offs )
            output.offs                 =                                       ( output.offs + 1 )
          else
            output.offs                 =                                       ( output.offs + 2 * ( depth - idepth ))
          end if
          store                         byte  char                              at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
        else if ( char = '_' )
          func                          __hash_char__                           yasic.label_seed,                       ( char )
          mode                          =                                       yasic.mLabel
          offs                          =                                       ( ipos )
          store                         byte  '_'                               at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
        else if ( char = ' ' | char = yasic.sNewLine )
        else
          mode                          yasic_fail                              'unexpected character in space!',                           char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mRemark )                                          ;< remark >
        if      ( char = yasic.sNewLine )
          mode                          =                                       yasic.mSpace
        end if
      else if ( mode = yasic.mInline )                                          ;< inline >
        if ( char = yasic.sNewLine )
          inline.brackets               =                                       ( 0 )
          offs                          =                                       ( 0 )
          mode                          =                                       yasic.mInlineParse
        else
          mode                          yasic_fail                              'expected a newline',                                       char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mInlineParse |\
                mode = yasic.mInlineSpace )                                     ;< inline parse/space >
        if ( mode = yasic.mInlineParse )
          temp                          =                                       ( 0 )
        end if
        if      ( char = ' ' & mode = yasic.mInlineParse )
          offs                          =                                       ( offs + 1 )
          if ( offs = ( depth * 2 ))
            times ( depth )             db                                      '  '
            mode                        =                                       yasic.mInlineSpace
          end if
        else if ( char = ' ' & mode = yasic.mInlineSpace )
          db                            ' '
        else if ( char = yasic.sNewLine )
          db                            yasic.sNewLine
          offs                          =                                       ( 0 )
          mode                          =                                       yasic.mInlineParse
        else if ( char = '\' )
          mode                          =                                       yasic.mInlineEscape
        else if ( char = '}' )
          mode                          =                                       yasic.mSpace
        else
          if ( mode = yasic.mInlineParse )
            times ( depth )             db                                      '  '
          end if
          db                            char
          mode                          =                                       yasic.mInlineOp
        end if
      else if ( mode = yasic.mInlineWait )                                      ;< inline wait >
        if      ( char = ' ' )
        else if ( char = '\' )
          mode                          =                                       yasic.mInlineEscape
        else if ( char = '$' )
;          mode                          =                                       null                                    ;<- I probably forgot this sometime and wonder, why the hack it fails
        else if ( char = yasic.sApostrophe )
          offs                          =                                       ( offs + 1 )
          db                            char
          mode                          =                                       yasic.mInlineString
        else if ( char = yasic.sNewLine )
          db                            yasic.sNewLine
          offs                          =                                       ( 0 )
          mode                          =                                       yasic.mInlineParse
        else
          offs                          =                                       ( offs + 1 )
          db                            char
          mode                          =                                       yasic.mInlineArg
        end if
      else if ( mode = yasic.mInlineString )                                    ;< inline string >
        offs                            =                                       ( offs + 1 )
        db                              char
        if      ( char = yasic.sApostrophe )
          mode                          =                                       yasic.mInlineInsert
        end if
      else if ( mode = yasic.mInlineOp |\
                mode = yasic.mInlineArg )                                       ;< inline op/arg >
        if      ( char = '\' )
          mode                          =                                       yasic.mInlineEscape
        else if ( char = '$' )
;          mode                          =                                       null                                    ;<- I probably forgot this sometime and wonder, why the hack it fails
        else if ( char = yasic.sApostrophe )
          offs                          =                                       ( offs + 1 )
          db                            char
          mode                          =                                       yasic.mInlineString
        else if ( char = '(' | char = '[' | char = '{' | char = '<' )
          offs                          =                                       ( offs + 1 )
          db                            char
          inline.brackets               =                                       ( inline.brackets + 1 )
        else if ( char = ')' | char = ']' | char = '}' | char = '>' )
          offs                          =                                       ( offs + 1 )
          db                            char
          inline.brackets               =                                       ( inline.brackets - 1 )
        else if ( mode = yasic.mInlineOp  & inline.brackets = 0 & char = ' ' )
          times ( 40 - offs - 1 )       db                                      ' '
          offs                          =                                       ( 0 - 1 )
          mode                          =                                       yasic.mInlineWait
        else if ( mode = yasic.mInlineArg & inline.brackets = 0 & char = ',' )
          db                            ','
          times ( 40 - offs - 2 )       db                                      ' '
          offs                          =                                       ( 0 - 1 )
          mode                          =                                       yasic.mInlineWait
        else if ( char = yasic.sNewLine )
          offs                          =                                       ( 0 )
          mode                          =                                       yasic.mInlineParse
          db                            yasic.sNewLine
        else
          offs                          =                                       ( offs + 1 )
          db                            char
        end if
      else if ( mode = yasic.mInlineEscape )                                    ;< inline escape >
        mode                            =                                       yasic.mInlineInsert
        if      ( char = '=' )
          times ( 41 - ( pos - temp ))  db                                      ' '
          temp                          =                                       ( temp + 40 )
        else
          offs                          =                                       ( offs + 1 )
          db                            char
        end if
      else if ( mode = yasic.mContent )                                         ;< content >
        db                              char
        if      ( char = yasic.sNewLine )
          mode                          =                                       yasic.mSpace
        end if
      else if ( mode = yasic.mCommandStop )                                     ;< command stop >
        if      ( char = yasic.sNewLine | char = ';' )
          if ( begin = 0 )
            yasic_operation             depth,                                  'push',                                 yasic.TheChar
            begin                       =                                       2
            depth                       =                                       ( depth + 1 )
          end if
          if (( argument.ctr + 1 ) = 0 )
            store                       word  '()'                              at output:( output.offs + 0 )
            store                       byte  yasic.sNewLine                    at output:( output.offs + 2 )
            output.offs                 =                                       ( output.offs + 3 )
          else
            store                       word  '( '                              at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
            repeat                      ( argument.ctr + 1 )
              load                      temp word                               from arguments:( 12 * ( % - 1 ) + 0 )
              load                      size dword                              from arguments:( 12 * ( % - 1 ) + 4 )
              load                      offs qword                              from arguments:( 12 * ( % - 1 ) + 8 )
              if      ( temp = yasic.tString )
                store                   word  '»'                               at output:( output.offs )
                repeat                  ( size )
                  load                  a byte                                  from chars:( offs + % - 1 )
                  store                 byte a                                  at output:( output.offs + % + 1 )
                end repeat
                store                   word  '«'                               at output:( output.offs + 2 + size )
                output.offs             =                                       ( output.offs + 2 + size + 2 )
              else if ( temp = yasic.tValue )
                store                   word  '0x'                              at output:( output.offs )
                repeat                  ( 16 )
                  char                  =                                       ( '0' + ((( offs ) shr ( 64 - ( % * 4 ))) and 0x0F ))
                  if ( char > '9' )
                    char                =                                       ( char + 'A' - '9' - 1 )
                  end if
                  store                 byte  char                              at output:( output.offs + 2 + ( % - 1 ))
                end repeat
                output.offs             =                                       ( output.offs + 2 + 16 )
              end if
              if    ( argument.ctr = ( % - 1 ))
                store                   word  ' )'                              at output:(                             output.offs + 0 )
                store                   byte  yasic.sNewLine                    at output:( output.offs + 2 )
                output.offs             =                                       ( output.offs + 3 )
              else
                store                   word  ', '                              at output:( output.offs )
                output.offs             =                                       ( output.offs + 2 )
              end if
            end repeat
          end if
          temp                          =                                       yasic.tVoid
          size                          =                                       0
          offs                          =                                       0
          if      ( symbol.cmd = yasic.lReturn )
            mode                        =                                       yasic.mSpace
            times ( depth )             db                                      '  '
            db                          'ret', yasic.sNewLine
          else if ( func = yasic.lFail )
            mode                        =                                       yasic.mSpace
            times ( depth )             db                                      '  '
            db                          'jmp'
            times ( 40 - ( 2 * depth ) - 3 )                                    db                                      ' '
            db                          yasic.FailSafe, yasic.sNewLine
          else if ( func = yasic.lDef )

          else if ( symbol.cmd = yasic.lEcho )
            mode                        =                                       yasic.mSpace
            repeat                      ( argument.ctr + 1 )
              load temp                 word                                    from  arguments:( 16 * ( % - 1 ) + 0 )
              if      ( temp = yasic.tString )
                load                    offs  qword                             from  arguments:( 16 * ( % - 1 ) + 8 )
                store                   qword offs                              at    messages:( message.ctr * 12 )
                load                    size  dword                             from  arguments:( 16 * ( % - 1 ) + 4 )
                store                   dword size                              at    messages:( message.ctr * 12 + 8 )
                if ( message.ctr >=     message.num )
                  mode                  yasic_fail                              'too many messages! adjust message.num.',                   char,     line,     go,       pos,      input
                end if
                times ( depth )         db                                      '  '
                db                      yasic.OpEcho
                times ( 40 - ( 2 * depth ) - yasic.OpEcho.size )                db                                      ' '
                if ( yasic.IndirectString eq true )
                  db                    'qword [ msg_'
                  hq                    message.ctr
                  db                    ' ]'
                  times ( 80 - ( 40 + 8 + 4 + 16 + 2 ))                         db                                      ' '
                else
                  db                    'msg_'
                  hq                    message.ctr
                  times ( 80 - ( 40 + 0 + 4 + 16 + 0 ))                         db                                      ' '
                end if
                db                      ';: »'
                repeat                  ( size )
                  load                  char byte                               from chars:( offs + ( % - 1 ))
                  db                    char
                end repeat
                message.ctr             =                                       ( message.ctr + 1 )
                db                      '«', yasic.sNewLine
              else
                mode                    yasic_fail                              'jump needs a destination!',                                char,     line,     go,       pos,      input
              end if
            end repeat
          else if ( symbol.cmd = yasic.lJump )
            if ( argument.ctr = 0 )
              load temp                 word                                    from arguments:( 0 )
              if      ( temp = yasic.tString )
                mode                    =                                       yasic.mSpace
                times ( depth )         db                                      '  '
                db                      'jmp'
                times ( 40 - ( 2 * depth ) - 3 )                                db                                      ' '
                load offs               qword                                   from arguments:( 8 )
                load size               dword                                   from arguments:( 4 )
                repeat                  ( size )
                  load                  a byte                                  from chars:( offs + ( % - 1 ))
                  db                    a
                end repeat
                db                      yasic.sNewLine
              else
                mode                    yasic_fail                              'jump needs a destination!',                                char,     line,     go,       pos,      input
              end if
            else if ( argument.ctr = ( 0 - 1 ))
              mode                      yasic_fail                              'jump needs an argument!',                                  char,     line,     go,       pos,      input
            else
              mode                      yasic_fail                              'jump has too many arguments!',                             char,     line,     go,       pos,      input
            end if
          else if ( symbol.cmd = yasic.lCall )
            if ( argument.ctr = 0 )
              mode                      =                                       yasic.mSpace
              times ( depth )           db                                      '  '
              db                        'call'
              times ( 40 - ( 2 * depth ) - 4 )                                  db                                      ' '
              load temp                 word                                    from arguments:( 0 )
              if      ( temp = yasic.tString )
                load offs               qword                                   from arguments:( 8 )
                load size               dword                                   from arguments:( 4 )
                repeat                  ( size )
                  load                  a byte                                  from chars:( offs + ( % - 1 ))
                  db                    a
                end repeat
                db                      yasic.sNewLine
              else
                mode                    yasic_fail                              'call needs a destination!',                                char,     line,     go,       pos,      input
              end if
            else if ( argument.ctr = ( 0 - 1 ))
              mode                      yasic_fail                              'call needs an argument!',                                  char,     line,     go,       pos,      input
            else
              mode                      yasic_fail                              'call has too many arguments!',                             char,     line,     go,       pos,      input
            end if
          else
            mode                        yasic_fail                              'unexpected command!',                                      char,     line,     go,       pos,      input
          end if
          if ( symbol.var = 0xffffffffffffffff )
          else
            store                       word  temp                              at symbols:(( symbol.var * 16 ) + 0 )
            store                       dword size                              at symbols:(( symbol.var * 16 ) + 4 )
            store                       qword offs                              at symbols:(( symbol.var * 16 ) + 8 )
          end if
        else if ( char = ' ' )
        else
          mode                          yasic_fail                              'unexpected character in command-stop!',                    char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mCommandLook )                                     ;< command look >
        if      ( char = ' ' )
        else if ( char = ')' )
          argument.ctr                  =                                       ( 0 - 1 )
          mode                          =                                       yasic.mCommandStop
        else if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ))
          argument.ctr                  =                                       0
          func                          __hash_char__                           yasic.label_seed,                       ( char )
          mode                          =                                       yasic.mCommandArgument
        else if ( char = yasic.sApostrophe )
          argument.ctr                  =                                       0
          offs                          =                                       ( ipos + isize )
          size                          =                                       0
          mode                          =                                       yasic.mCommandString
        else
          mode                          yasic_fail                              'unexpected character in command-look!',                    char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mCommandWait )                                     ;< command wait >
        if      ( char = ' ' )
        else if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ))
          func                          __hash_char__                           yasic.label_seed,                       ( char )
          mode                          =                                       yasic.mCommandArgument
        else if ( char = yasic.sApostrophe )
          offs                          =                                       ( ipos + isize )
          size                          =                                       0
          mode                          =                                       yasic.mCommandString
        else
          mode                          yasic_fail                              'unexpected character in command-look!',                    char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mCommandNext )                                     ;< command next >
        if      ( char = ' ' )
        else if ( char = ')' )
          mode                          =                                       yasic.mCommandStop
        else if ( char = ',' )
          argument.ctr                  =                                       ( argument.ctr + 1 )
          if ( argument.ctr = argument.max )
            mode                        yasic_fail                              'too many arguments! adjust argument.max.',                 char,     line,     go,       pos,      input
          else
            mode                        =                                       yasic.mCommandWait
          end if
        else
          mode                          yasic_fail                              'unexpected character in command-next!',                    char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mCommandArgument )                                 ;< command argument >
        if      ( char = ' ' | char = ',' | char = ')'                          )
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          if      ( func = yasic.lChar )
            temp                        =                                       yasic.tValue
            size                        =                                       0
            offs                        =                                       char
          else
            func                        =                                       ( symbol.msk and func )
            load temp                   word                                    from symbols:(( func * 16 ) + 0 )
            load size                   dword                                   from symbols:(( func * 16 ) + 4 )
            load offs                   qword                                   from symbols:(( func * 16 ) + 8 )
          end if
          store                         word  temp                              at arguments:(( argument.ctr * 16 ) + 0 )
          store                         dword size                              at arguments:(( argument.ctr * 16 ) + 4 )
          store                         qword offs                              at arguments:(( argument.ctr * 16 ) + 8 )
          if      ( char = ' ' )
            mode                        =                                       yasic.mCommandNext
          else if ( char = ',' )
            argument.ctr                =                                       ( argument.ctr + 1 )
            if ( argument.ctr = argument.max )
              mode                      yasic_fail                              'too many arguments! adjust argument.max.',                 char,     line,     go,       pos,      input
            else
              mode                      =                                       yasic.mCommandWait
            end if
          else if ( char = ')' )
            mode                        =                                       yasic.mCommandStop
          end if
        else if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ) | ( char >= '0' & char <= '9' ) | char = '_' )
          func                          __hash_char__                           func,                                   ( char )
        end if
      else if ( mode = yasic.mCommandString )                                   ;< command string >
        if      ( char = yasic.sNewLine )
          mode                          yasic_fail                              'unexpected end of line in command-string',                 char,     line,     go,       pos,      input
        else if ( char = yasic.sApostrophe )
          store                         word  yasic.tString                     at arguments:(( argument.ctr * 16 ) + 0 )
          store                         dword size                              at arguments:(( argument.ctr * 16 ) + 4 )
          store                         qword offs                              at arguments:(( argument.ctr * 16 ) + 8 )
          mode                          =                                       yasic.mCommandNext
        else
          size                          =                                       ( size + isize )
        end if
      else if ( mode = yasic.mLet )                                             ;< let >
        if      ( char = ' ' )
        else
          func                          __hash_char__                           yasic.label_seed,                       ( char )
          if ( char >= '1' & char <= '9' )
            mode                        =                                       yasic.mLetDecimal
            value                       =                                       ( char - '0' )
          else if ( char = '0' )
            mode                        =                                       yasic.mLetNull
            value                       =                                       0
          else if ( char = yasic.sApostrophe )
            offs                        =                                       pos
            size                        =                                       0
            mode                        =                                       yasic.mLetString
            store                       word  '»'                               at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
          else if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ))
            mode                        =                                       yasic.mCommandCommand
          else
            mode                        yasic_fail                              'unexpected character in let!',                             char,     line,     go,       pos,      input
          end if
        end if
      else if ( mode = yasic.mLetDecimal )                                      ;< let decimal >
        if      ( char >= '0' & char    <= '9' )
          value                         =                                       (( value * 10 ) + ( char - '0' ))
        else if ( char = yasic.sNewLine | char = ' ' )
          store                         word  '0x'                              at output:( output.offs )
          repeat                        ( 16 )
            char                        =                                       ( '0' + ((( value ) shr ( 64 - ( % * 4 ))) and 0x0F ))
            if ( char > '9' )
              char                      =                                       ( char + 'A' - '9' - 1 )
            end if
            store                       byte  char                              at output:( output.offs + 2 + ( % - 1 ))
          end repeat
          store                         byte  yasic.sNewLine                    at output:( output.offs + 2 + 16 + 0 )
          output.offs                   =                                       ( output.offs + 2 + 16 + 1 )
          store                         word  yasic.tValue                      at symbols:(( symbol.var * 16 ) + 0 )
          store                         dword null                              at symbols:(( symbol.var * 16 ) + 4 )
          store                         qword value                             at symbols:(( symbol.var * 16 ) + 8 )
          if ( ichar = yasic.sNewLine )
            mode                        =                                       yasic.mSpace
          else
            mode                        =                                       yasic.mLetWait
          end if
        else
          mode                          yasic_fail                              'unexpected character in let decimal!',                     char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mLetHexadecimal )                                  ;< let hexadecimal >
        if      ( char >= '0' & char    <= '9' )
          value                         =                                       (( value shl 4 ) + ( char - '0' ))
        else if ( char >= 'A' & char    <= 'F' )
          value                         =                                       (( value shl 4 ) + ( char - 'A' + 10 ))
        else if ( char >= 'a' & char    <= 'f' )
          value                         =                                       (( value shl 4 ) + ( char - 'a' + 10 ))
        else if ( char = yasic.sNewLine | char = ' ' )
          store                         word  '0x'                              at output:( output.offs )
          repeat                        ( 16 )
            char                        =                                       ( '0' + ((( value ) shr ( 64 - ( % * 4 ))) and 0x0F ))
            if ( char > '9' )
              char                      =                                       ( char + 'A' - '9' - 1 )
            end if
            store                       byte  char                              at output:( output.offs + 2 + ( % - 1 ))
          end repeat
          store                         byte  yasic.sNewLine                    at output:( output.offs + 2 + 16 + 0 )
          output.offs                   =                                       ( output.offs + 2 + 16 + 1 )
          store                         word  yasic.tValue                      at symbols:(( symbol.var * 16 ) + 0 )
          store                         dword 0                                 at symbols:(( symbol.var * 16 ) + 4 )
          store                         qword value                             at symbols:(( symbol.var * 16 ) + 8 )
          if ( ichar = yasic.sNewLine )
            mode                        =                                       yasic.mSpace
          else
            mode                        =                                       yasic.mLetWait
          end if
        else
          mode                          yasic_fail                              'unexpected character in let hexadecimal!',                 char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mLetString )                                       ;< let string >
        if      ( char = yasic.sApostrophe )
          store                         word  '«'                               at output:( output.offs + 0 )
          store                         byte  yasic.sNewLine                    at output:( output.offs + 2 )
          output.offs                   =                                       ( output.offs + 3 )
          store                         word  yasic.tString                     at symbols:(( symbol.var * 16 ) + 0 )
          store                         dword size                              at symbols:(( symbol.var * 16 ) + 4 )
          store                         qword offs                              at symbols:(( symbol.var * 16 ) + 8 )
          mode                          =                                       yasic.mLetWait
        else if ( char = yasic.sNewLine )
          mode                          yasic_fail                              'unexpected line feed in let string!',                      char,     line,     go,       pos,      input
        else
          store                         byte  char                              at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
          size                          =                                       ( size + isize )
        end if
      else if ( mode = yasic.mLetWait )                                         ;< let wait >
        if      ( char = yasic.sNewLine )
          mode                          =                                       yasic.mSpace
        else if ( char = ' ' )
        else
          mode                          yasic_fail                              'unexpected character in let wait!',                        char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mLetNull )                                         ;< let null >
        if      ( char = 'x' | char = 'X' | char = 'h' | char = 'H' )
          mode                          =                                       yasic.mLetHexadecimal
        else
          mode                          yasic_fail                              'unexpected character in let null!',                        char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mLabel |\
                mode = yasic.mLabelWait )                                       ;< label (wait) >
        if      ( char = '{')
          begin                         =                                       1
          times ( depth )               db                                      '  '
          repeat                        ( size )
            load                        char byte                               from chars:( offs + % - 1 )
            if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ))
              db                        ( char or yasic.fCaseMask )
            else
              db                        ( char )
            end if
          end repeat
          db                            ':', yasic.sNewLine
          times ( depth )               db                                      '  '
          db                            ';{', yasic.sNewLine
          store                         byte  yasic.sNewLine                    at output:( output.offs + 0 )
          output.offs                   =                                       ( output.offs + 1 + 2 * ( depth - idepth ))
          store                         byte  '{'                               at output:( output.offs + 0 )
          store                         byte  yasic.sNewLine                    at output:( output.offs + 1 )
          output.offs                   =                                       ( output.offs + 2 )
          depth                         =                                       ( depth + 1 )
          count                         =                                       0
          group                         =                                       0
          group.ctr                     =                                       0
          mode                          =                                       yasic.mSpace
        else if ( char = '=' )
          if ( symbol.var = 0xffffffffffffffff )
            func                        __hash_char__                           func,                                   0
            func                        __hash_char__                           func,                                   0
            func                        __hash_char__                           func,                                   0
            func                        __hash_char__                           func,                                   0
            func                        __hash_char__                           func,                                   0
            func                        __hash_char__                           func,                                   0
            func                        __hash_char__                           func,                                   0
            symbol.var                  =                                       ( symbol.msk and func )
            if ( mode = yasic.mLabel )
              output.offs               =                                       ( output.offs + ( 36 - pos ))
            else
              output.offs               =                                       ( output.offs + ( 36 - temp ))
            end if
            store                       byte  '['                               at output:( output.offs )
            store                       dword ' #0x'                            at output:( output.offs + 1 )
            repeat                      ( 16 )
              char                      =                                       ( '0' + ((( symbol.var ) shr ( 64 - ( % * 4 ))) and 0x0F ))
              if ( char > '9' )
                char                    =                                       ( char + 'A' - '9' - 1 )
              end if
              store                     byte  char                              at output:( output.offs + 5 + ( % - 1 ))
            end repeat
            store                       dword '] :='                            at output:(                             output.offs + 5 + 16 + 1 )
            output.offs                 =                                       ( output.offs + 5 + 15 + 6 )
            mode                        =                                       yasic.mLet
          else
            mode                        yasic_fail                              'already an assignment in command-command',                 char,     line,     go,       pos,      input
          end if
        else if ( char = '(' )
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          func                          __hash_char__                           func,                                   0
          symbol.cmd                    =                                       func
          mode                          =                                       yasic.mCommandLook
        else if ( char = ' ' | char = yasic.sNewLine )
          if ( mode = yasic.mLabel )
            temp                        =                                       ( ipos )
            mode                        =                                       yasic.mLabelWait
          end if
        else if ( mode = yasic.mLabel )
          if      (( char >= '0' & char <= '9' ))
            func                        __hash_char__                           func,                                   ( char )
            size                        =                                       ( size + isize )
            store                       byte  char                              at output:( output.offs )
            output.offs                 =                                       ( output.offs + 1 )
          else if (( char >= 'A' & char <= 'Z' ) | ( char >= 'a' & char <= 'z' ))
            func                        __hash_char__                           func,                                   ( char or yasic.fCaseMask )
            size                        =                                       ( size + isize )
            store                       byte  ( char or yasic.fCaseMask )       at output:( output.offs )
            output.offs                 =                                       ( output.offs + isize )
          else if ( char = '_' )
            func                        __hash_char__                           func,                                   ( char )
            size                        =                                       ( size + isize )
            store                       byte  char                              at output:( output.offs )
            output.offs                 =                                       ( output.offs + 1 )
          else
            mode                        yasic_fail                              'unexpected character in label!',                           char,     line,     go,       pos,      input
          end if
        else
          mode                          yasic_fail                              'unexpected character in after label!',                     char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mRange )                                           ;< range  >
        if ( char <= yasic.sControlChars  )
          mode                          yasic_fail                              'unexpected character in range!',                           char,     line,     go,       pos,      input
        else
          mode                          =                                       yasic.mRange_to
          value                         =                                       char
          store                         byte  char                              at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
        end if
      else if ( mode = yasic.mRange_to )                                        ;< range to >
        if ( char <= yasic.sControlChars )
          mode                          yasic_fail                              'unexpected character in range-to!',                        char,     line,     go,       pos,      input
        else
          mode                          =                                       yasic.mRange_wait
          store                         word  '..'                              at output:( output.offs + 0 )
          store                         byte  char                              at output:( output.offs + 2 )
          output.offs                   =                                       ( output.offs + 3 )
          if ( value < char )
            temp                        =                                       value
            value                       =                                       char
          else
            temp                        =                                       char
          end if
        end if
      else if ( mode = yasic.mRange_wait )                                      ;< range wait >
        if      ( char = ']' | char     = '|' )
          store                         byte  char                              at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
          if      ( value > temp )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, temp, yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, value, yasic.sApostrophe, ' )', yasic.sNewLine
            if ( char = ']' )
              if ( group.go = 1 )
                yasic_operation_        depth,                                  'ja',                                   '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              else
                yasic_operation_        depth,                                  'ja',                                   '.close_'
                hq                      ( count )
              end if
            else
              yasic_operation_          depth,                                  'jb',                                   '.range_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        '_'
              hw                        ( group.ctr )
            end if
            db                          yasic.sNewLine
          else
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, value, yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
          end if
          if ( char = ']' )
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
            mode                        =                                       yasic.mRegExWait
          else
            mode                        =                                       yasic.mRange
          end if
        else
          mode                          yasic_fail                              'unexpected character in range-wait!',                      char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mBlock )                                           ;< block >
        if      ( char = '{' )
          begin                         =                                       1
          times ( depth )               db                                      '  '
          db                            '.begin_'
          hq                            ( count )
          db                            ':', yasic.sNewLine
          times ( depth )               db                                      '  '
          db                            ';{', yasic.sNewLine
          store                         byte  yasic.sNewLine                    at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 + 2 * ( depth - idepth ))
          store                         byte  '{'                               at output:( output.offs + 0 )
          store                         byte  yasic.sNewLine                    at output:( output.offs + 1 )
          output.offs                   =                                       ( output.offs + 2 )
          store                         qword count                             at layer:(( depth - idepth ) * 10 + 0 )
          store                         word  group                             at layer:(( depth - idepth ) * 10 + 8 )
          count                         =                                       ( count + 1 )
          group                         =                                       0
          group.ctr                     =                                       0
          mode                          =                                       yasic.mSpace
          depth                         =                                       ( depth + 1 )
        else if ( char = ' ' | char = yasic.sNewLine )
        else
          displayValue                  'ipos  0x', ipos
          displayValue                  'pos   0x', pos
          displayValue                  'go    0x', go
          displayValue                  'line  0x', line
          displayValue                  'char  0x', char
          displayValue                  'ichar 0x', ichar
          mode                          yasic_fail                              'unexpected character between string and block!',           char,     line,     go,       pos,      input
        end if
      else if ( mode = yasic.mRegExOpen |\
                mode = yasic.mRegEx     )                                       ;< regex (open) >
        if      ( char = '\' )
          mode                          =                                       yasic.mRegExEscape
        else if ( char = '[' )
          store                         byte  '['                               at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
          group.go                      =                                       1
          mode                          =                                       yasic.mRange
          if ( mode = yasic.mRegEx )
            yasic_operation             depth,                                  'call',                                 yasic.GetChar
          end if
        else if ( char = '<' )
          mode                          =                                       yasic.mRegExClassStart
          if ( mode = yasic.mRegEx )
            yasic_operation             depth,                                  'call',                                 yasic.GetChar
          end if
        else if ( char = '.' )
          store                         byte  'a'                               at output:( output.offs + 0 )
          store                         word  'ny'                              at output:( output.offs + 1 )
          output.offs                   =                                       ( output.offs + 3 )
          mode                          =                                       yasic.mRegExWait
          if ( mode <> yasic.mRegExOpen )
            yasic_operation             depth,                                  'call',                                 yasic.GetChar
          end if
        else if ( char = '|' & mode = yasic.mRegEx )
          store                         byte  '|'                               at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
          if ( group.go = 0 )
            yasic_operation_            depth,                                  'jmp',                                  '.begin_'
            hq                          ( count )
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.group_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          ':', yasic.sNewLine
            group                       =                                       ( group + 1 )
          end if
          group.go                      =                                       1
          mode                          =                                       yasic.mRegExWait
        else if ( char = yasic.sApostrophe )
          mode                          =                                       yasic.mBlock
        else
          store                         word  '»'                               at output:( output.offs + 0 )
          store                         byte  char                              at output:( output.offs + 2 )
          output.offs                   =                                       ( output.offs + 3 )
          mode                          =                                       yasic.mRegExString
          if ( mode = yasic.mRegEx )
            yasic_operation             depth,                                  'call',                                 yasic.GetChar
          end if
          yasic_operation_              depth,                                  'cmp',                                  yasic.TheChar,                          '( '
          db                            yasic.sApostrophe, char, yasic.sApostrophe,                                     ' )', yasic.sNewLine
          if ( group.go = 1 )
            load                        char byte                               from chars:( ipos + isize )
            if ( char = '|' )
              yasic_operation_          depth,                                  'je',                                   '.begin_'
              hq                        ( count )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            end if
            group.go                    =                                       2
          else
            yasic_operation_            depth,                                  'jne',                                  '.close_'
            hq                          ( count )
            db                          yasic.sNewLine
            group.go                    =                                       0
          end if
        end if
      else if ( mode = yasic.mRegExWait |\
                mode = yasic.mRegExString )                                     ;< regex wait/string >
        if      ( char = '\' )
          if ( mode = yasic.mRegExString )
            mode                        =                                       yasic.mRegExEscapeString
          else
            store                       word  '..'                              at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
            mode                        =                                       yasic.mRegExEscape
          end if
          yasic_operation               depth,                                  'call',                                 yasic.GetChar
        else if ( char = '[' )
          if ( mode = yasic.mRegExString )
            store                       word  '«'                               at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
          end if
          store                         word  '..'                              at output:( output.offs + 0 )
          store                         byte  '['                               at output:( output.offs + 2 )
          output.offs                   =                                       ( output.offs + 3 )
          mode                          =                                       yasic.mRange
          yasic_operation               depth,                                  'call',                                 yasic.GetChar
        else if ( char = '<' )
          if ( mode = yasic.mRegExString )
            store                       word  '«'                               at output:( output.offs + 0 )
            store                       word  '..'                              at output:( output.offs + 2 )
            output.offs                 =                                       ( output.offs + 4 )
          end if
          mode                          =                                       yasic.mRegExClassStart
          yasic_operation               depth,                                  'call',                                 yasic.GetChar
        else if ( char = '.' )
          if ( mode = yasic.mRegExString )
            store                       word  '«'                               at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
          end if
          store                         dword '..an'                            at output:( output.offs + 0 )
          store                         byte  'y'                               at output:( output.offs + 4 )
          output.offs                   =                                       ( output.offs + 5 )
          mode                          =                                       yasic.mRegExWait
          yasic_operation               depth,                                  'call',                                 yasic.GetChar
        else if ( char = '|' )
          if ( mode = yasic.mRegExString )
            store                       word  '«'                               at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
          end if
          store                         word  '..'                              at output:( output.offs + 0 )
          store                         byte  '|'                               at output:( output.offs + 2 )
          output.offs                   =                                       ( output.offs + 3 )
          if ( group.go = 0 )
            yasic_operation_            depth,                                  'jmp',                                  '.begin_'
            hq                          ( count )
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.group_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          ':', yasic.sNewLine
            group                       =                                       ( group + 1 )
          end if
          group.go                      =                                       1
          mode                          =                                       yasic.mRegExWait
        else if ( char = yasic.sApostrophe )
          if ( mode = yasic.mRegExString )
            store                       word  '«'                               at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
          end if
          mode                          =                                       yasic.mBlock
        else
          if ( mode = yasic.mRegExWait )
            store                       dword '..»'                             at output:( output.offs )
            output.offs                 =                                       ( output.offs + 4 )
            mode                        =                                       yasic.mRegExString
          end if
          store                         byte  char                              at output:( output.offs )
          output.offs                   =                                       ( output.offs + 1 )
          yasic_operation               depth,                                  'call',                                 yasic.GetChar
          yasic_operation_              depth,                                  'cmp',                                  yasic.TheChar,                          '( '
          db                            yasic.sApostrophe, char, yasic.sApostrophe,                                     ' )', yasic.sNewLine
          if ( group.go = 1 )
            load                        char byte                               from chars:( ipos + isize )
            if ( char = '|' )
              yasic_operation_          depth,                                  'je',                                   '.begin_'
              hq                        ( count )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            end if
            group.go                    =                                       2
          else
            yasic_operation_            depth,                                  'jne',                                  '.close_'
            hq                          ( count )
            db                          yasic.sNewLine
            group.go                    =                                       0
          end if
        end if
      else if ( mode = yasic.mRegExEscape | mode = yasic.mRegExEscapeString )   ;< regex escape (string) >
        temp                            =                                       mode
        mode                            =                                       yasic.mRegExWait
        if ( char = 'd' | char = 's' | char = 'w' |\
            char = 'D' | char = 'S'    | char = 'W' )
          if ( temp = yasic.mRegExEscapeString )
            store                       dword '«..'                             at output:( output.offs )
            output.offs                 =                                       ( output.offs + 4 )
          end if
          if      ( char = 'd' )
            store                       byte  'd'                               at output:( output.offs + 0 )
            store                       dword 'igit'                            at output:( output.offs + 1 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
          else if ( char = 'D' )
            store                       qword 'no digit'                        at output:( output.offs )
            output.offs                 =                                       ( output.offs + 8 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( char = 's' )
            store                       byte  's'                               at output:( output.offs + 0 )
            store                       dword 'pace'                            at output:( output.offs + 1 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sTabulator
            else
              db                        'yasic.sTabulator'
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sCarriageReturn
            else
              db                        'yasic.sCarriageReturn'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ' ', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'je',                                   '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'jne',                                  '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( char = 'S' )
            store                       qword 'no space'                        at output:( output.offs )
            output.offs                 =                                       ( output.offs + 8 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ' ', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'jne',                                  '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'je',                                   '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'je',                                   '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sTabulator
            else
              db                        'yasic.sTabulator'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sCarriageReturn
            else
              db                        'yasic.sCarriageReturn'
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( char = 'w' )
            store                       dword 'word'                            at output:( output.offs )
            output.offs                 =                                       ( output.offs + 4 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '_', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'je',                                   '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'jne',                                  '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hq                        yasic.fCaseMask
            else
              db                        'yasic.fCaseMask'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'jb',                                   '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'ja',                                   '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( char = 'W' )
            store                       word  'no'                              at output:( output.offs + 0 )
            store                       dword 'word'                            at output:( output.offs + 3 )
            output.offs                 =                                       ( output.offs + 7 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '_', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'jne',                                  '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'je',                                   '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'je',                                   '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hq                        yasic.fCaseMask
            else
              db                        'yasic.fCaseMask'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          end if
        else if ( char = '0' )
          store                         dword 'null'                            at output:( output.offs )
          output.offs                   =                                       ( output.offs + 4 )
          yasic_operation               depth,                                  'or',                                   yasic.TheChar,                          yasic.TheChar
          yasic_operation_              depth,                                  'jnz',                                  '.close_'
          hq                            ( count )
          db                            yasic.sNewLine
        else
          yasic_operation_              depth,                                  'cmp',                                  yasic.TheChar,                          '( '
          if ( char = 'a' | char = 'b' | char = 'e' | char = 'f' | char = 'n' |\
              char = 'r' | char = 't'  | char = 'v' | char = 'x' )
            if ( temp = yasic.mRegExEscapeString )
              store                     dword '«..'                             at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
            end if
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
            end if
            if      ( char = 'a' )
              store                     dword 'bell'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sBell
              else
                db                      'yasic.sBell'
              end if
            else if ( char = 'b' )
              store                     qword 'backspac'                        at output:( output.offs + 0 )
              store                     byte  'e'                               at output:( output.offs + 8 )
              output.offs               =                                       ( output.offs + 9 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sBackSpace
              else
                db                      'yasic.sBackSpace'
              end if
            else if ( char = 'e' )
              store                     word  'es'                              at output:( output.offs + 0 )
              store                     dword 'cape'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sEscape
              else
                db                      'yasic.sEscape'
              end if
            else if ( char = 'f' )
              store                     word  'ne'                              at output:( output.offs + 0 )
              store                     byte  'w'                               at output:( output.offs + 2 )
              store                     dword 'page'                            at output:( output.offs + 3 )
              output.offs               =                                       ( output.offs + 7 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNewPage
              else
                db                      'yasic.sNewPage'
              end if
            else if ( char = 'n' )
              store                     word  'ne'                              at output:( output.offs + 0 )
              store                     byte  'w'                               at output:( output.offs + 2 )
              store                     dword 'line'                            at output:( output.offs + 3 )
              output.offs               =                                       ( output.offs + 7 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNewLine
              else
                db                      'yasic.sNewLine'
              end if
            else if ( char = 'r' )
              store                     word  're'                              at output:( output.offs + 0 )
              store                     dword 'turn'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sCarriageReturn
              else
                db                      'yasic.sCarriageReturn'
              end if
            else if ( char = 't' )
              store                     byte  't'                               at output:( output.offs + 0 )
              store                     word  'ab'                              at output:( output.offs + 1 )
              output.offs               =                                       ( output.offs + 3 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sTabulator
              else
                db                      'yasic.sTabulator'
              end if
            else if ( char = 'v' )
              store                     dword 'vtab'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sVerticalTab
              else
                db                      'yasic.sVerticalTab'
              end if
            else if ( char = 'x' )
              mode                      =                                       yasic.mRegExHexWait
              value                     =                                       0
            end if
          else if ( char = 'q' )
            mode                        =                                       yasic.mRegExString
            if ( temp = yasic.mRegExEscape )
              store                     word  '»'                               at output:( output.offs + 0 )
              store                     byte  yasic.sApostrophe                 at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 3 )
            else
              store                     byte  yasic.sApostrophe                 at output:( output.offs )
              output.offs               =                                       ( output.offs + 1 )
            end if
            if ( yasic.MagicNumbers eq true )
              hb                        yasic.sApostrophe
            else
              db                        'yasic.sApostrophe'
            end if
          else if ( char = 'Q' )
            mode                        =                                       yasic.mRegExString
            if ( temp = yasic.mRegExEscape )
              store                     word  '»'                               at output:( output.offs + 0 )
              store                     byte  yasic.sQuotation                  at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 3 )
            else
              store                     byte  yasic.sQuotation                  at output:( output.offs )
              output.offs               =                                       ( output.offs + 1 )
            end if
            if ( yasic.MagicNumbers eq true )
              hb                        yasic.sQuotation
            else
              db                        'yasic.sQuotation'
            end if
          else
            mode                        =                                       yasic.mRegExString
            if ( temp = yasic.mRegExEscape )
              store                     word  '»'                               at output:( output.offs + 0 )
              store                     byte  char                              at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 3  )
            else
              store                     byte  char                              at output:( output.offs )
              output.offs               =                                       ( output.offs + 1 )
            end if
            db                          yasic.sApostrophe, char, yasic.sApostrophe
          end if
          db                            ' )', yasic.sNewLine
          if ( group.go = 1 )
            load                        char byte                               from chars:( ipos + isize )
            if ( char = '|' )
              yasic_operation_          depth,                                  'je',                                   '.begin_'
              hq                        ( count )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            end if
            group.go                    =                                       2
          else
            yasic_operation_            depth,                                  'jne',                                  '.close_'
            hq                          ( count )
            db                          yasic.sNewLine
            group.go                    =                                       0
          end if
        end if
      else if ( mode = yasic.mRegExHexString | mode = yasic.mRegExHexWait )     ;< regex hex string/wait >
        if      ( char >= '0' & char    <= '9' )
          value                         =                                       ( value shl 4 ) + ( char - '0' )
        else if ( char >= 'A' & char    <= 'F' )
          value                         =                                       ( value shl 4 ) + ( char - 'A' + 10 )
        else if ( char >= 'a' & char    <= 'f' )
          value                         =                                       ( value shl 4 ) + ( char - 'a' + 10 )
        else
          yasic_operation_              depth,                                  'cmp',                                  yasic.TheChar,                          '( '
          if      ( value <= yasic.sControlChars | value = yasic.sDelete | value = yasic.sEscape )
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
            end if
            if ( mode = yasic.mRegExHexString )
              store                     dword  '«..'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
            else
              store                     word   '«'                              at output:( output.offs )
              output.offs               =                                       ( output.offs + 2 )
            end if
            if      ( value = yasic.sNull )
              store                     dword 'null'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNull
              else
                db                      'yasic.sNull'
              end if
            else if ( value = yasic.sBell )
              store                     dword 'bell'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sBell
              else
                db                      'yasic.sBell'
              end if
            else if ( value = yasic.sBackSpace )
              store                     qword 'backspac'                        at output:( output.offs + 0 )
              store                     byte  'e'                               at output:( output.offs + 8 )
              output.offs               =                                       ( output.offs + 9 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sBackSpace
              else
                db                      'yasic.sBackSpace'
              end if
            else if ( value = yasic.sTabulator )
              store                     word  'ta'                              at output:( output.offs + 0 )
              store                     byte  'b'                               at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 3 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sTabulator
              else
                db                      'yasic.sTabulator'
              end if
            else if ( value = yasic.sNewLine )
              store                     word  'ne'                              at output:( output.offs + 0 )
              store                     byte  'w'                               at output:( output.offs + 2 )
              store                     dword 'line'                            at output:( output.offs + 3 )
              output.offs               =                                       ( output.offs + 7 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNewLine
              else
                db                      'yasic.sNewLine'
              end if
            else if ( value = yasic.sVerticalTab )
              store                     dword 'vtab'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sVerticalTab
              else
                db                      'yasic.sVerticalTab'
              end if
            else if ( value = yasic.sFormFeed )
              store                     word  'ne'                              at output:( output.offs + 0 )
              store                     byte  'w'                               at output:( output.offs + 2 )
              store                     dword 'page'                            at output:( output.offs + 3 )
              output.offs               =                                       ( output.offs + 7 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNewPage
              else
                db                      'yasic.sNewPage'
              end if
            else if ( value = yasic.sCarriageReturn )
              store                     word  're'                              at output:( output.offs + 0 )
              store                     dword 'turn'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sCarriageReturn
              else
                db                      'yasic.sCarriageReturn'
              end if
            else if ( value = yasic.sEscape )
              store                     word  'es'                              at output:( output.offs + 0 )
              store                     qword 'cape'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sEscape
              else
                db                      'yasic.sEscape'
              end if
            else if ( value = yasic.sDelete )
              store                     word  'de'                              at output:( output.offs + 0 )
              store                     qword 'lete'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sDelete
              else
                db                      'yasic.sDelete'
              end if
            end if
            db                          yasic.sNewLine
            mode                        =                                       yasic.mRegExWait
          else
            if ( mode = yasic.mRegExHexWait )
              store                     dword  '..»'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
            end if
            store                       byte  value                             at output:( output.offs )
            output.offs                 =                                       ( output.offs + 1 )
            db                          yasic.sApostrophe, value, yasic.sApostrophe,                                    yasic.sNewLine
            mode                        =                                       yasic.mRegExString
          end if
          if ( char <> '\' )
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'je',                                   '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'jne',                                  '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            if ( mode = yasic.RegExWait )
              store                     dword '..»'                             at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              mode                      =                                       yasic.mRegExString
            end if
            store                       byte  char                              at output:( output.offs )
            output.offs                 =                                       ( output.offs + 1 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          '( '
            db                          yasic.sApostrophe, char, yasic.sApostrophe
          end if
          db                            ' )', yasic.sNewLine
          if ( group.go = 1 )
            load                        char byte                               from chars:( ipos + isize )
            if ( char = '|' )
              yasic_operation_          depth,                                  'je',                                   '.begin_'
              hq                        ( count )
            else
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            end if
            group.go                    =                                       2
          else
            yasic_operation_            depth,                                  'jne',                                  '.close_'
            hq                          ( count )
            group.go                    =                                       0
          end if
          db                            yasic.sNewLine
        end if
      else if ( mode = yasic.mRegExClassStart )                                 ;< regex class start >
        if      ( char = '>' )
          mode                          yasic_fail                              'empty class!',                                             char,     line,     go,       pos,      input
        else
          temp                          =                                       char
          mode                          =                                       yasic.mRegExClassFirst
        end if
      else if ( mode = yasic.mRegExClassFirst )                                 ;< regex class first >
        if      ( char = '>' )
          if (( temp >= 'A' & temp <= 'Z' ) | ( temp >= 'a' & temp <= 'z' ))
            mode                        =                                       yasic.mRegExWait
            store                       byte  temp and ( not yasic.fCaseMask )  at output:( output.offs + 0 )
            store                       byte  '/'                               at output:( output.offs + 1 )
            store                       byte  temp or        yasic.fCaseMask    at output:( output.offs + 2 )
            output.offs                 =                                       ( output.offs + 3 )
            load                        char byte                               from chars:( ipos + isize )
            if ( char <> yasic.sApostrophe & char <> '|' )
              store                     word  '..'                              at output:( output.offs )
              output.offs               =                                       ( output.offs + 2 )
            end if
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hq                        yasic.fCaseMask
            else
              db                        'yasic.fCaseMask'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          '( '
            db                          yasic.sApostrophe, ( temp and ( not yasic.fCaseMask )),                         yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'je',                                   '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'jne',                                  '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
          else
            mode                        yasic_fail                              'unknown class: ',                                          char,     line,     go,       pos,      input,    % - 1,    1
          end if
        else
          class                         __hash_char__                           yasic.class_seed,                       temp
          class                         __hash_char__                           class,                                  char
          offs                          =                                       ( ipos - 1 )
          size                          =                                       2
          temp                          =                                       char
          mode                          =                                       yasic.mRegExClassParse
        end if
      else if ( mode = yasic.mRegExClassParse )                                 ;< regex class parse >
        if      ( char = '>' )
          mode                          =                                       yasic.mRegExWait
          class                         __hash_char__                           class,                                  0
          class                         __hash_char__                           class,                                  0
          class                         __hash_char__                           class,                                  0
          class                         __hash_char__                           class,                                  0
          class                         __hash_char__                           class,                                  0
          class                         __hash_char__                           class,                                  0
          class                         __hash_char__                           class,                                  0
          if      ( class = yasic.cAlnum |\
                    class = yasic.cAlphaNum |\
                    class = yasic.cAlphaNumerical )
            store                       dword 'alph'                            at output:( output.offs + 0 )
            store                       word  'a '                              at output:( output.offs + 4 )
            store                       qword 'numerica'                        at output:( output.offs + 6 )
            store                       byte  'l'                               at output:( output.offs + 14 )
            output.offs                 =                                       ( output.offs + 15 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( yasic.fCaseMask )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cAlpha )
            store                       dword 'alph'                            at output:( output.offs + 0 )
            store                       byte  'a'                               at output:( output.offs + 4 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( yasic.fCaseMask )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cAny )
            store                       word  'an'                              at output:( output.offs + 0 )
            store                       byte  'y'                               at output:( output.offs + 2 )
            output.offs                 =                                       ( output.offs + 3 )
          else if ( class = yasic.cBlank )
            store                       dword 'blan'                            at output:( output.offs + 0 )
            store                       byte  'k'                               at output:( output.offs + 4 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sTabulator
            else
              db                        'yasic.sTabulator'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ' ', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cBracket )
            store                       dword 'brac'                            at output:( output.offs + 0 )
            store                       word  'ke'                              at output:( output.offs + 4 )
            store                       byte  't'                               at output:( output.offs + 6 )
            output.offs                 =                                       ( output.offs + 7 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '<', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '{', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '[', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '(', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ')', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ']', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '}', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '>', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cCntrl |\
                    class = yasic.cControl )
            store                       dword 'cont'                            at output:( output.offs + 0 )
            store                       word  'ro'                              at output:( output.offs + 4 )
            store                       byte  'l'                               at output:( output.offs + 6 )
            output.offs                 =                                       ( output.offs + 7 )
            db                          '( 0x1f )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sDelete
            else
              db                        'yasic.sDelete'
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cDigit |\
                    class = yasic.cDecimal )
            store                       byte  'd'                               at output:( output.offs + 0 )
            store                       dword 'igit'                            at output:( output.offs + 1 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cGraph |\
                    class = yasic.cGraphical )
            store                       qword 'graphica'                        at output:( output.offs + 0 )
            store                       byte  'l'                               at output:( output.offs + 8 )
            output.offs                 =                                       ( output.offs + 9 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( 0x21 )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( 0x7e )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cLower |\
                    class = yasic.cLowerCase )
            store                       qword 'lower ca'                        at output:( output.offs + 0 )
            store                       word  'se'                              at output:( output.offs + 8 )
            output.offs                 =                                       ( output.offs + 10 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cMath |\
                    class = yasic.cMathematical )
            store                       qword 'mathemat'                        at output:( output.offs + 0 )
            store                       dword 'ical'                            at output:( output.offs + 8 )
            output.offs                 =                                       ( output.offs + 12 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '!', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '%', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '&', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '*', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '+', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '-', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '/', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '<', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '=', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '>', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '^', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '|', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '~', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cNoDigit |\
                    class = yasic.cNotADigit |\
                    class = yasic.cNo_Digit |\
                    class = yasic.cNotADecimal |\
                    class = yasic.cNoDecimal |\
                    class = yasic.cNo_Decimal )
            store                       qword 'no digit'                        at output:( output.offs )
            output.offs                 =                                       ( output.offs + 8 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cNoSpace |\
                    class = yasic.cNo_Space |\
                    class = yasic.cNotASpace )
            store                       qword 'no space'                        at output:( output.offs )
            output.offs                 =                                       ( output.offs + 8 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ' ', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'jne',                                  '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'je',                                   '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'je',                                   '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sTabulator
            else
              db                        'yasic.sTabulator'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sCarriageReturn
            else
              db                        'yasic.sCarriageReturn'
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cNoWord |\
                    class = yasic.cNo_Word |\
                    class = yasic.cNotAWord )
            store                       word  'no'                              at output:( output.offs + 0 )
            store                       dword 'word'                            at output:( output.offs + 3 )
            output.offs                 =                                       ( output.offs + 7 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '_', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'jne',                                  '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'je',                                   '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'je',                                   '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hq                        yasic.fCaseMask
            else
              db                        'yasic.fCaseMask'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cOctal )
            store                       dword 'octa'                            at output:( output.offs + 0 )
            store                       byte  'l'                               at output:( output.offs + 4 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '7', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cPrint |\
                    class = yasic.cPrintable )
            store                       qword 'printabl'                        at output:( output.offs + 0 )
            store                       byte  'e'                               at output:( output.offs + 8 )
            output.offs                 =                                       ( output.offs + 9 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( 0x20 )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( 0x7e )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cPunct |\
                    class = yasic.cPunctuation )
            store                       qword 'punctuat'                        at output:( output.offs + 0 )
            store                       byte  'i'                               at output:( output.offs + 8 )
            store                       word  'on'                              at output:( output.offs + 9 )
            output.offs                 =                                       ( output.offs + 11 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '!', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '/', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ':', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '@', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '[', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '`', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '{', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '~', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cQuote |\
                    class = yasic.cQuotationMark )
            store                       qword 'quotatio'                        at output:( output.offs + 0 )
            store                       word  'n '                              at output:( output.offs + 8 )
            store                       word  'mark'                            at output:( output.offs + 10 )
            output.offs                 =                                       ( output.offs + 114 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sApostrophe
            else
              db                        'yasic.sApostrophe'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sQuotation
            else
              db                        'yasic.sQuotation'
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cSpace )
            store                       byte  's'                               at output:( output.offs + 0 )
            store                       dword 'pace'                            at output:( output.offs + 1 )
            output.offs                 =                                       ( output.offs + 5 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sTabulator
            else
              db                        'yasic.sTabulator'
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
              hb                        yasic.sCarriageReturn
            else
              db                        'yasic.sCarriageReturn'
            end if
            db                          ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, ' ', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jne',                                  '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cUpper |\
                    class = yasic.cUpperCase )
            store                       word  'up'                              at output:( output.offs + 0 )
            store                       qword 'per case'                        at output:( output.offs + 2 )
            output.offs                 =                                       ( output.offs + 10 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'A', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'Z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cWord )
            store                       dword 'word'                            at output:( output.offs )
            output.offs                 =                                       ( output.offs + 4 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '_', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'je',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( yasic.fCaseMask )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'z', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else if ( class = yasic.cXDigit |\
                    class = yasic.cXDecimal |\
                    class = yasic.cHexaDecimal )
            store                       qword 'hexdigit'                        at output:( output.offs )
            output.offs                 =                                       ( output.offs + 8 )
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '0', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, '9', yasic.sApostrophe, ' )', yasic.sNewLine
            yasic_operation_            depth,                                  'jb',                                   '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          yasic.sNewLine
            yasic_operation_            depth,                                  'or',                                   yasic.TheChar,                          ''
            db                          '( yasic.fCaseMask )', yasic.sNewLine
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'a', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'jb',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
              db                        yasic.sNewLine
            else
              yasic_operation_          depth,                                  'jb',                                   '.close_'
              hq                        ( count )
              db                        yasic.sNewLine
            end if
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          ''
            db                          '( ', yasic.sApostrophe, 'f', yasic.sApostrophe, ' )', yasic.sNewLine
            if ( group.go = 1 )
              yasic_operation_          depth,                                  'ja',                                   '.group_'
              hq                        ( count )
              db                        '_'
              hw                        ( group )
            else
              yasic_operation_          depth,                                  'ja',                                   '.close_'
              hq                        ( count )
            end if
            db                          yasic.sNewLine
            times ( depth )             db                                      '  '
            db                          '.range_'
            hq                          ( count )
            db                          '_'
            hw                          ( group )
            db                          '_'
            hw                          ( group.ctr )
            db                          ':', yasic.sNewLine
            group.go                    =                                       0
            group.ctr                   =                                       ( group.ctr + 1 )
          else
            yasic_operation_            depth,                                  'cmp',                                  yasic.TheChar,                          '( '
            if ( yasic.MagicNumbers eq true )
              db                        '0x'
            end if
            if      ( class = yasic.cBack |\
                      class = yasic.cBackSpace )
              store                     qword 'backspac'                        at output:( output.offs + 0 )
              store                     byte  'e'                               at output:( output.offs + 8 )
              output.offs               =                                       ( output.offs + 9 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sBackSpace
              else
                db                      'yasic.sBackSpace'
              end if
            else if ( class = yasic.cBell )
              store                     dword 'bell'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sBell
              else
                db                      'yasic.sBell'
              end if
            else if ( class = yasic.cEscape )
              store                     word  'es'                              at output:( output.offs + 0 )
              store                     dword 'cape'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sEscape
              else
                db                      'yasic.sEscape'
              end if
            else if ( class = yasic.cNewLine |\
                      class = yasic.cNew_Line |\
                      class = yasic.cLineFeed )
              store                     word  'ne'                              at output:( output.offs + 0 )
              store                     byte  'w'                               at output:( output.offs + 2 )
              store                     dword 'line'                            at output:( output.offs + 3 )
              output.offs               =                                       ( output.offs + 7 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNewLine
              else
                db                      'yasic.sNewLine'
              end if
            else if ( class = yasic.cNewPage |\
                      class = yasic.cNew_Page |\
                      class = yasic.cFormFeed )
              store                     word  'ne'                              at output:( output.offs + 0 )
              store                     byte  'w'                               at output:( output.offs + 2 )
              store                     dword 'page'                            at output:( output.offs + 3 )
              output.offs               =                                       ( output.offs + 7 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNewPage
              else
                db                      'yasic.sNewPage'
              end if
            else if ( class = yasic.cNull )
              store                     dword 'null'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sNull
              else
                db                      'yasic.sNull'
              end if
            else if ( class = yasic.cReturn |\
                      class = yasic.cCarriageReturn )
              store                     word  're'                              at output:( output.offs + 0 )
              store                     dword 'turn'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sCarriageReturn
              else
                db                      'yasic.sCarriageReturn'
              end if
            else if ( class = yasic.cTab |\
                      class = yasic.cTabulator )
              store                     byte  't'                               at output:( output.offs + 0 )
              store                     word  'ab'                              at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 3 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sTabulator
              else
                db                      'yasic.sTabulator'
              end if
            else if ( class = yasic.cVTab |\
                      class = yasic.cVerticalTab |\
                      class = yasic.cVerticalTabulator )
              store                     dword 'vtab'                            at output:( output.offs )
              output.offs               =                                       ( output.offs + 4 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sVerticalTab
              else
                db                      'yasic.sVerticalTab'
              end if
            else if ( class = yasic.cDelete |\
                      class = yasic.cDEL )
              store                     word  'de'                              at output:( output.offs + 0 )
              store                     dword 'lete'                            at output:( output.offs + 2 )
              output.offs               =                                       ( output.offs + 6 )
              if ( yasic.MagicNumbers eq true )
                hb                      yasic.sDelete
              else
                db                      'yasic.sDelete'
              end if
            else
              mode                      yasic_fail                              'unknown class: ',                                          char,     line,     go,       pos,      input,    offs,     size
            end if
            db                          ' )', yasic.sNewLine
            if ( group.go = 1 )
              load                      char byte                               from chars:( ipos + isize )
              if ( char = '|' )
                yasic_operation_        depth,                                  'je',                                   '.begin_'
                hq                      ( count )
              else
                yasic_operation_        depth,                                  'jne',                                  '.group_'
                hq                      ( count )
                db                      '_'
                hw                      ( group )
              end if
              group.go                  =                                       2
            else
              yasic_operation_          depth,                                  'jne',                                  '.close_'
              hq                        ( count )
              group.go                  =                                       0
            end if
            db                          yasic.sNewLine
          end if
          load                          char byte                               from chars:( ipos + isize )
          if ( char <> yasic.sApostrophe & char <> '|' )
            store                       word  '..'                              at output:( output.offs )
            output.offs                 =                                       ( output.offs + 2 )
          end if
        else
          class                         __hash_char__                           class,                                  char
          size                          =                                       ( size + isize )
        end if
      else if ( mode = yasic.mError )                                           ;< error >
      else                                                                      ;< else >
        mode                            =                                       yasic.mInvalid
        mode                            yasic_fail                              'internal error: unknown mode!',                            char,     line,     go,       pos,      input
      end if
      ipos                              =                                       ( ipos + isize )
    end if
  end repeat
  times ( idepth - 1 )                  db                                      '  '
  db                                    ';}', yasic.sNewLine
  if      ( mode = yasic.mSpace )
    if ( yasic.Output eq 'elf64' )
      db                                'segment readable  writeable', yasic.sNewLine
    end if
    times ( idepth - 1 )                db                                      '  '
    db                                  ';( text )', yasic.sNewLine
    times ( idepth - 1 )                db                                      '  '
    db                                  ';{', yasic.sNewLine
    if ~( yasic.SourceText eq '' )
      file                              yasic.SourceText
      db                                yasic.sNewLine
    end if
    virtual                             at null
      db                                yasic.Symbol
      yasic.Symbol.size                 =                                       $
    end virtual
    repeat                              message.ctr
      temp                              =                                       ( % - 1 )
      times ( idepth )                  db                                      '  '
      db                                'msg_'
      hq                                temp
      times ( 20 - 2 * idepth )         db                                      ' '
      db                                yasic.Symbol
      times ( 40 - yasic.Symbol.size )  db                                      ' '
      load                              offs  qword                             from messages:( temp * 12 )
      load                              size  dword                             from messages:( temp * 12 + 8 )
      load                              char  byte                              from chars:( offs )
      if ( char = '\' )
        mode                            =                                       yasic.mEscape
      else
        mode                            =                                       yasic.mString
        db                              yasic.sApostrophe, char
      end if
      repeat                            ( size - 1 )
        load                            char  byte                              from chars:( offs + % )
        if      ( mode = yasic.mMessage )
          if      ( char = '\' )
            mode                        =                                       yasic.mEscape
          else
            mode                        =                                       yasic.mString
            db                          ', ', yasic.sApostrophe, char
          end if
        else if ( mode = yasic.mString )
          if      ( char = '\' )
            mode                        =                                       yasic.mEscapeString
          else
            db                          char
          end if
        else if ( mode = yasic.mEscape | mode = yasic.mEscapeString )
          if      ( char = '0' | char = 'a' | char = 'b' | char = 'e' | char = 'f' |\
                    char = 'n' | char = 'r' | char = 't' | char = 'v' )
            if ( mode = yasic.mEscapeString )
              db                        yasic.sApostrophe
            end if
          else if ( mode = yasic.mEscape )
            db                          yasic.sApostrophe
          end if
          mode                          =                                       yasic.mMessage
          if      ( char = '0' )
            db                          ', 0x'
            hb                          yasic.sNull
          else if ( char = 'a' )
            db                          ', 0x'
            hb                          yasic.sBell
          else if ( char = 'b' )
            db                          ', 0x'
            hb                          yasic.sBackspace
          else if ( char = 'e' )
            db                          ', 0x'
            hb                          yasic.sEscape
          else if ( char = 'f' )
            db                          ', 0x'
            hb                          yasic.sNewPage
          else if ( char = 'n' )
            db                          ', 0x'
            hb                          yasic.sNewLine
          else if ( char = 'r' )
            db                          ', 0x'
            hb                          yasic.sCarriageReturn
          else if ( char = 't' )
            db                          ', 0x'
            hb                          yasic.sTabulator
          else if ( char = 'v' )
            db                          ', 0x'
            hb                          yasic.sVerticalTab
          else
            db                          char
            mode                        =                                       yasic.mString
          end if
        end if
      end repeat
      db                                yasic.sApostrophe, ', 10', yasic.sNewLine
    end repeat
    times ( idepth - 1 )                db                                      '  '
    db                                  ';}', yasic.sNewLine
    if ~( yasic.SourceData eq '' )
      times ( idepth - 1 )              db                                      '  '
      db                                ';( data )', yasic.sNewLine
      times ( idepth - 1 )              db                                      '  '
      db                                ';{', yasic.sNewLine
      db
      file                              yasic.SourceData
      db                                yasic.sNewLine
      times ( idepth - 1 )              db                                      '  '
      db                                ';}', yasic.sNewLine
    end if
    if ~( yasic.SourceResv eq '' )
      times ( idepth - 1 )              db                                      '  '
      db                                ';( resv )', yasic.sNewLine
      times ( idepth - 1 )              db                                      '  '
      db                                ';{', yasic.sNewLine
      db
      file                              yasic.SourceResv
      db                                yasic.sNewLine
      times ( idepth - 1 )              db                                      '  '
      db                                ';}', yasic.sNewLine
    end if
    times ( idepth - 1 )                db                                      '  '
    db                                  ';( structure )', yasic.sNewLine
    times ( idepth - 1 )                db                                      '  '
    db                                  ';{', yasic.sNewLine
    times ( idepth - 1 )                db                                      '  '
    db                                  ';:  '
    temp                                =                                       1
    repeat                              ( output.offs )
      load                              char byte                               from output:( % - 1 )
      if      ( char = yasic.sNull    )
        db                              ' '
        display                         ' '
        temp                            =                                       0
      else if ( char = yasic.sNewLine )
        if ( temp = 0 )
          db                            yasic.sNewLine
          times ( idepth - 1 )          db                                      '  '
          db                            ';:  '
        end if
        display                         yasic.sNewLine
        temp                            =                                       1
      else
        db                              char
        display                         char
        temp                            =                                       0
      end if
    end repeat
    times ( idepth - 1 )                db                                      '  '
    db                                  yasic.sNewLine, ';}', yasic.sNewLine
  else if ( mode = yasic.mError )
    db                                  yasic.sNewLine
    db                                  ';<[asm:yasic] script stopped lethally!>'
    db                                  yasic.sNewLine
  else
    mode                                yasic_fail                              'unexpected end of script!',           char,     line,     go,       pos,      input
  end if
}